package Advanced2;

//Annotations in Java are used to provide additional information, so it is an alternative option for XML and Java marker interfaces.

//@Override: This annotation makes sure that the sub class method is successfully overiding the parent class method.
//        While overriding a class, there is a chance of typing errors or spelling mistakes.
//        In such cases, the method will not get overridden and you will get an error.
//        Override exception helps us to encounter such situtations by extracting a warning from the compiler.

//@Deprecated: This annotation is used to mark a deprecated method.
//        If developer uses the deprecated method then the compiler generated a warning.
//        There high chance of removal of deprecated methods in future versions therefore it is better to not use them.

//@SupressWarnings: This annotation helps us to supress some warnings that are being generated by compiler.

//@FunctionInterface: An interface which contains only one abstract method is known as functional interface.
//@FunctionInterface annotation helps us to make sure that a functional interface is not having more than one abstract method.

class KeyPadPhone{
    //@Deprecated
    void sendMessage(){
        System.out.println("Text message sent!");
    }
}

class AndroidPhone extends KeyPadPhone{
    @Override
    void sendMessage(){
        System.out.println("Message sent via WhatsApp!");
    }
}

@FunctionalInterface
interface myFunctionalInterface {
    void method1();
}

public class JavaDocs_Annotations {
    public static void main(String[] args){
        @SuppressWarnings("deprecation")
        AndroidPhone Samsung = new AndroidPhone();
        Samsung.sendMessage();
        System.out.println("Functional interface annotation");
    }
}
